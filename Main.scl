ORGANIZATION_BLOCK "Main"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_TEMP 
      lifebit : Bool;
   END_VAR

   VAR CONSTANT 
      sApagado : Int := 10;
      sManual : Int := 20;
      sAutomatico : Int := 30;
   END_VAR


BEGIN
	// siwarex 
	"WP321_DB"(HW_ID:="Local~SIWAREX_WP321_1",
	           LIFEBIT=>#lifebit);

	"NodeRed".gramosSiwarex := REAL_TO_INT(IN :="WP321_DB".s_IO_DATA.PROCESS_VAL_1 * 1000);

	// Local References
	#sActual := REF("States".sActual);
	#nMotorHusilloON := REF("NodeRed".motorHusilloON);
	#nMotorPidON := REF("NodeRed".pidON);
	#nVariadorHzFrecuenciaManual := REF(#nVariadorHzFrecuenciaManual);
	#nvariadorHzFrecuenciaAuto := REF("NodeRed".variadorHzFrecuenciaAuto);
	#nVariadorHzFrecuenciaSalida := REF("NodeRed".variadorHzFrecuenciaSalida);
	
	// Control from Node-Red
	CASE #sActual OF
	    #sApagado:
	        #nVariadorHzFrecuenciaSalida := 0;
	        IF #nMotorHusilloON = TRUE AND #nMotorPidON = FALSE THEN
	            #nVariadorHzFrecuenciaSalida := REAL_TO_INT(INT_TO_REAL(#nVariadorHzFrecuenciaManual) * 460.8);
	            #sActual := #sManual;
	        ELSIF #nMotorHusilloON = FALSE AND #nMotorPidON = TRUE THEN
	            #nVariadorHzFrecuenciaSalida := #nvariadorHzFrecuenciaAuto;
	            #nMotorHusilloON := TRUE;
	            #sActual := #sAutomatico;
	        END_IF;
	    #sManual:
	        #nVariadorHzFrecuenciaSalida := REAL_TO_INT(INT_TO_REAL(#nVariadorHzFrecuenciaManual) * 460.8);  //460.8 = 27648/60
	        IF #nMotorHusilloON = FALSE AND #nMotorPidON = FALSE THEN
	            #nVariadorHzFrecuenciaSalida := 0;
	            #sActual := #sApagado;
	        ELSIF #nMotorHusilloON = TRUE AND #nMotorPidON = TRUE THEN
	            "States".sActual := #sAutomatico;
	        END_IF;
	    #sAutomatico:
	        #nVariadorHzFrecuenciaSalida := #nvariadorHzFrecuenciaAuto;
	        IF #nMotorHusilloON = TRUE AND #nMotorPidON = FALSE  THEN
	            #nMotorHusilloON := FALSE;
	            #sActual := #sApagado;
	        ELSIF #nMotorHusilloON = FALSE AND #nMotorPidON = TRUE THEN
	            #nMotorPidON := FALSE;
	            #sActual := #sApagado;
	        END_IF; 
	END_CASE;
	
	
	// Validar cuando llega el PID a una diferencia del setpoint y el peso
	
	
	"OUT_motorHusillo" := "NodeRed".motorHusilloON;
	"OUT_variadorHzFrecOperacion" := INT_TO_WORD(#nVariadorHzFrecuenciaSalida);
END_ORGANIZATION_BLOCK

